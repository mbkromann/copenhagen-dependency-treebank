%! (c) 2004 Matthias T. Kromann <mtk@id.cbs.dk>

%% This PostScript library is distributed under the GNU public
%% license for libraries, as part of the DGgraph package.
%% Please see: http://www.id.cbs.dk/~mtk/DGgraph for source code,
%% documentation and license.

%% 1. DGalign Prologue

100 dict begin /llx 20 def /lly 20 def /urx 600 def /ury 820 def
/textfont 10 def /edgefont 8 def /dh textfont 1.2 mul def /dw 100 def
/dex 5 def /dey 3 def /dew 20 def /delbly -2 def /dboxy1 edgefont 0.7
mul def /dboxy2 edgefont -0.3 mul def /dboxx edgefont 0.2 mul def
/bgcolor {1 1 1} def /topmargin dh def /botmargin topmargin def
/minwidth 30 def /maxwidth 200 def /pageheight ury lly sub def /xdef
{exch def} def /ISOfont {findfont dup length dict begin {1 index /FID
ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def
currentdict end definefont pop} def /Palatino-Roman-Latin1
/Palatino-Roman ISOfont /Palatino-Bold-Latin1 /Palatino-Bold ISOfont
/Palatino-Italic-Latin1 /Palatino-Italic ISOfont
/Palatino-BoldItalic-Latin1 /Palatino-BoldItalic ISOfont /Palatino
[(ptm) /Palatino-Roman-Latin1 /Palatino-Bold-Latin1
/Palatino-Italic-Latin1 /Palatino-BoldItalic-Latin1] def
/setfontfamily {/fontfamily xdef} def /setfontsize {/fontsize xdef}
def /setfontstyle {/fontstyle xdef} def /font 7 string def /fontext 4
string def /setupfont {font 0 fontfamily 0 get putinterval font 3
fontstyle 1 add 1000 mul fontsize cvi add fontext cvs putinterval
currentdict font cvn known not {currentdict font cvn fontfamily
fontstyle 1 add get findfont fontsize scalefont put} if font cvn cvx
exec setfont} def Palatino setfontfamily edgefont setfontsize 0
setfontstyle setupfont /efont currentfont def Palatino setfontfamily
textfont setfontsize 0 setfontstyle setupfont /tfont currentfont def
/format {gsave /oldfontstyle fontstyle def /oldfontsize fontsize def
/oldfontfamily fontfamily def exch dup 0 ge 1 index formats length le
and {dup 0 eq {pop} {formats exch 1 sub get exec} ifelse} {pop} ifelse
exec grestore fontstyle oldfontstyle ne fontsize oldfontsize ne or
fontfamily oldfontfamily ne or {oldfontfamily setfontfamily
oldfontsize setfontsize oldfontstyle setfontstyle setupfont} if} def
/setup {/dimensions xdef /dimension dimensions length def /nodes 0
dimensions {add} forall array def /column_id -1 def /node_id 0 def}
def /newcolumn {/column_id column_id 1 add def /offset node_id def}
def /node {dup type /integertype ne {0} if [ 3 1 roll null null null
null] nodes node_id 2 index put pop /node_id node_id 1 add def} def
/edge {dup type /stringtype eq {0} if [ 5 1 roll ] dup edge2nodes dup
{nodes exch get [ 3 index 2 index 2 get dup null eq {pop} {aload pop}
ifelse ] 2 exch put} forall pop pop} def /edge2nodes {[ 1 index 0 get
dup type /arraytype eq {aload pop} if counttomark 1 add index 1 get
dup type /arraytype eq {aload pop} if ] exch pop} def /cut {{[ 1 index
aload pop ] 3 1 roll {4 index exch nodecut pop} do_newcut 3 -1 roll
false 1 2 dimension 2 mul {dup 3 index exch get exch 4 index exch get
ne or} for {3 -1 roll pop} {3 1 roll pop pop exit} ifelse} loop} def
/nodecut {nodes exch get 2 get dup null eq {pop} {{edge2nodes {dup
node2dim 2 mul 1 add dup 3 index exch get dup null eq {pop 0} if 3 -1
roll max 2 index 3 1 roll put} forall} forall} ifelse} def /node2dim
{0 exch dimensions {sub dup 0 ge {exch 1 add exch} {exit} ifelse}
forall pop} def /cut2count {0 0 1 dimension 1 sub {dup 2 mul 1 add 3
index exch get dup null eq {pop pop} {exch 2 mul 3 index exch get sub
1 add add} ifelse} for exch pop} def /compute_components {[ 0
dimensions {1 index add null exch} forall pop ] 0 process_components}
def /process_components {{1e10 null null 0 1 dimension 1 sub {[ 6
index aload pop ] dup 2 index 2 mul 1 add get dup null eq {pop dup 2
index 2 mul get} {1 add} ifelse dup node2dim 3 index eq {2 index 2 mul
1 add 2 index 3 1 roll exch put 6 index exch cut dup cut2count dup 6
index lt {3 1 roll 6 3 roll pop pop pop} {pop pop pop} ifelse} {pop
pop pop} ifelse} for dup null eq {pop pop pop exch pop array nodes
{dup 3 get exch 4 get 2 index 3 1 roll put} forall /components exch
def exit} {4 index exch {nodes exch get dup 3 8 index put 4 3 index
put} do_newcut 6 1 roll pop pop pop exch pop exch dup length array 0 1
dimension 1 sub {2 mul 2 index 1 index 1 add get dup null eq {pop 2
index 1 index get} {1 add} ifelse 2 index 3 1 roll put} for 3 1 roll
pop 1 add} ifelse} loop} def /do_newcut {0 1 dimension 1 sub {dup 2
mul 1 add 4 index exch get dup null eq {pop dup 2 mul 4 index exch
get} {1 add} ifelse 1 index 2 mul 1 add 4 index exch get dup null eq
{pop 1 index 2 mul 4 index exch get 1 sub} if 3 -1 roll pop 1 exch {1
index exec} for} for pop} def /ylayout {[ dimension {0} repeat ]
components {0 exch {4 index exch get 4 -1 roll max 3 1 roll}
do_component_dim dup component_height dh mul exch {dup 2 mul 3 index
exch get 3 index 2 index 2 mul 1 add get dup 2 index sub 1 add 6 index
exch div 7 index 4 2 roll 1 exch {3 index 9 index position_node 1
index add} for 7 index 3 index 3 -1 roll put pop pop} do_component_dim
pop pop pop} forall 0 exch {max} forall pageheight div cvi 1 add array
/pages exch def 0 1 pages length 1 sub {pages exch [ dimension {0}
repeat ] put} for} def /rmod {dup 2 index exch div cvi 1 index mul
exch pop sub} def /position_node {4 -1 roll dup pageheight rmod
pageheight botmargin sub gt {pageheight div cvi 1 add pageheight mul
topmargin add} if dup pageheight rmod topmargin lt {pageheight div cvi
pageheight mul topmargin add} if 4 1 roll exch 3 index put nodes exch
get 5 2 index put} def /do_component_dim {0 1 dimension 1 sub {dup 2
mul 1 add 3 index exch get null eq {pop} {1 index exec} ifelse} for
pop} def /component_height {0 exch {2 mul dup 1 add 3 index exch get
exch 3 index exch get sub 1 add 4 -1 roll max 3 1 roll}
do_component_dim pop} def /xlayout {0 0 1 dimension 1 sub {0 minwidth
4 -1 roll dup 4 index dimensions exch get add dup 6 1 roll 1 sub 1
exch {nodes exch get dup 0 get exch 5 get pageheight div cvi dup 4
index ne {4 2 roll exch pages exch get exch 4 index exch put exch
minwidth exch} {pop} ifelse stringwidth pop maxwidth min max} for exch
pages exch get 3 1 roll put} for pop} def /drawpages {[ 0 dimensions
{add dup} forall pop] [ 0 dimensions {1 index add} forall pop ] llx
ury 10 sub moveto title exch pop {title pop show} format 0 1 pages
length 1 sub {[ llx pages 3 index get {1 index add dup dw add} forall
pop] dup /columns exch def 4 1 roll gsave -10000 lly botmargin sub
moveto -10000 ury topmargin add lineto 10000 ury topmargin add lineto
10000 lly botmargin sub lineto closepath clip 0 1 index 1 add
pageheight mul translate newpath 0 1 dimension 1 sub {dup 3 index exch
get {dup 5 index 3 index get ge {pop pop exit} if dup nodes exch get
dup 5 get pageheight div cvi 4 index ne {pop pop pop exit} if drawnode
1 add 3 index 2 index 2 index put} loop} for pop 3 -1 roll pop
showpage grestore} for pop pop} def /drawnode {2 index 0 eq {1} {2
index dimension 1 sub eq {0} {0.5} ifelse} ifelse exch dup dup 0 get
exch 1 get tfont setfont {dup stringwidth pop 9 index dup 7 index 2
mul dup 1 add 3 1 roll get 3 1 roll get 1 index sub 3 -1 roll sub 4
index mul add 2 index 5 get neg moveto show} format 2 get exch pop dup
null eq {pop []} if {dup edge2nodes 1e10 exch {dup nodes exch get 5
get pageheight div cvi 6 index eq {min} {pop} ifelse} forall 2 index
eq {drawedge} {pop} ifelse} forall} def /drawedge {aload pop efont
setfont {2 index enodes_dim 2 index enodes_dim lt 4 -1 roll 1 index
node_cluster 5 -1 roll 3 index not node_cluster dup 3 index add 2 div
2 index 5 index add 2 div exch 6 2 roll moveto lineto gsave [] 0
setdash currentlinewidth 3 mul setlinewidth 1 setgray stroke grestore
0.5 setgray stroke moveto pop dup stringwidth pop 2 div neg delbly
rmoveto bgshow} format} def /bgshow {dup () eq {pop} {gsave dup
stringwidth pop dboxx neg 0 rmoveto 0 dboxy1 rlineto dup dboxx 2 mul
add 0 rlineto 0 dboxy2 dboxy1 sub rlineto neg dboxx 2 mul sub 0
rlineto closepath bgcolor setrgbcolor fill grestore show} ifelse} def
/node_cluster {exch dup type /arraytype eq {[ 3 1 roll {1 index exch
nodepos 3 -1 roll} forall 0 counttomark 2 sub 2 div dup 1 1 3 -1 roll
{2 mul 1 add index 3 -1 roll add exch} for dup 3 1 roll div 4 index 3
index dew exch not {neg} if add exch 3 -1 roll cvi {1 index 1 index
moveto 5 -2 roll lineto} repeat 4 2 roll pop pop} {nodepos} ifelse}
def /nodepos {dup nodes exch get 5 get exch node2dim 3 -1 roll {2 mul
1 add columns exch get dex add exch neg dey add} {2 mul columns exch
get dex sub exch neg dey add} ifelse} def /enodes_dim {dup type
/arraytype eq {0 get} if node2dim} def /draw {compute_components
ylayout xlayout drawpages} def 


%% 2. Graph specification

