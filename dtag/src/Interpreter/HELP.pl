my $commands = {
	'<return>' => ['update follow-file', '<return>'],
	'#' => ['ignore line', '# $comment'],
	'!' => ['execute shell command', '! $shell-command'],
	'cd'   => ['change directory', 'cd $dir'],
	'clear'=> ['clear graph or lexicon', 'clear [-tag|-lex]'],
	'close'=> ['close current graph', 'close'],
	'comment'=>['insert comment in TAG file', 'comment $pos $comment'],
	'corpus'=>['set corpus files', 'corpus [-clear] [-add] $file ...'],
	'del'  => ['delete node or edge', 'del $node [$etype $node]'],
	'diff' => ['show differences between graphs', 'diff $file'],
	'edge' => ['create new edge', '[edge] $nodein $etype $nodeout'],
	'edit' => ['edit node or edge', 'edit $node [$var[=$value]] ...'],
	'exit' => ['exit the tagger', 'exit'],
	'find' => ['find matches in graph', 'find [-corpus] [-replace($cmd)]... [-key($template)] [-text($template)] $query'],
	'follow'=>['print graph as PostScript file for each blank line', 'follow [$file]'],
	'goto' => ['goto match of search', 'goto [M|G][$id|+|-]'],
	'graphs'=>['display list of open graphs', 'graphs'],
	'help' => ['print help for specified command', 'help [$command]'],
	'inline'=>['insert inline DTAG command in TAG file', 'inline $pos $dtag'],
	'layout' => ['specify layout for nodes and edges', 'layout $command'],
	'lexicon'=> ['specify lexicon name', 'lexicon $lex'],
	'load' => ['load graph or lexicon', 'load [-tag|-lex|-match] [$file]'],
	'lookup'=>['lookup lexemes found at start of string', 'lookup $string'],
	'lookupw'=>['lookup lexemes matching string', 'lookupw $string'],
	'ls' => ['list files in current directory', 'ls $lsargs'],
	'macro'	=> ['define/delete macro', 'macro $macro $command'],
	'macros'=> ['list macros', 'macros'],
	'matches' => ['list matches in search', 'matches [-num] [-reverse] [-nomatch] [-stats([key|text],[key|text])]'],
	'mkdir' =>['make directory', 'mkdir $dir'],
	'move' => ['move node', 'move $pos1 $pos2'],
	'new'  => ['create new graph', 'new'],
	'next' => ['display next match in search', 'next [M|G]'],
	'node' => ['create new node', '[node [[+-]pos]] $phon [$var=$value] ...'],
	'offset'=>['set offset for node numbering', 'offset [=+-]$offset'],
	'perl' => ['evaluate Perl expression ($G=graph, $I=interpreter, $L=lexicon)', 'perl $expr'],
	'prev' => ['display previous match in search', 'prev [M|G]'],
	'print'=> ['print graph as PostScript file', 'print [$file]'],
	'pwd' =>  ['print working directory', 'pwd'],
	'rm' =>   ['remove file', 'rm $file'],
	'rmdir' =>   ['remove directory', 'rmdir $dir'],
	'save' => ['save graph or lexicon', 'save [-tag|-lex|-match|-conll|-malt|-xml] [$file]'],
	'script'=>['execute script', 'script $file'],
	'server'=>['specify server directory', 'server $dir'],
	'shell' =>['execute shell command', 'shell $cmd'],
	'show' => ['print only nodes in graph with indices between $imin and $imax', 'show $imin[-$imax]'],
	'sleep' =>['sleep specified number of seconds', 'sleep $seconds'],
	'style' => ['specify formatting for given style', 'style $style $options'],
	'touch' => ['mark current graph as modified', 'touch'],
	'undiff'=> ['reset diff', 'undiff'],
	'unix' => ['execute unix command', 'unix $cmd'],
	'vars'  => ['declare or undeclare variables', 'vars [-$var] [+$var[:$abbrev]] ...'],
	'view' => ['view graph', 'view [$node]'],
	'viewer'=>['open GV PostScript viewer', 'viewer'],
};

